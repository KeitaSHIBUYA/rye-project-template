# Trigger: Pull Request

steps:
  # requirements.lock と requirements-dev.lock のバージョン指定をチェック
  - id: 'Check requirements.lock'
    name: python:3.12-slim
    entrypoint: bash
    args:
      - -c
      - |
        cd ${_SERVICE_NAME}
        # バージョン指定が'=='の場合はエラーを出力
        if grep '~=' requirements.lock requirements-dev.lock; then
          echo "Error: Found '==' in requirements.lock. Please use '==' for version specifications."
          exit 1
        else
          echo "All package versions are correctly specified with '=='."
        fi

  # requirements-dev.lock を加工
  - id: 'Processing requirements-dev.lock'
    name: python:3.12-slim
    entrypoint: bash
    args:
      - -c
      - |
        cd ${_SERVICE_NAME}
        # sed で-e file: から始まる行をコメントアウト
        sed -i 's/^-e file:.*/# &/' requirements-dev.lock

  # 依存関係のインストール
  - id: 'Install dependencies'
    name: python:3.12-slim
    entrypoint: bash
    args:
      - -c
      - |
        cd ${_SERVICE_NAME}
        # python 仮想環境を作成
        python3 -m venv venv || exit 1
        source venv/bin/activate || exit 1
        pip3 install --upgrade pip
        pip3 install -r requirements-dev.lock

  # 静的解析
  - id: 'Check lint'
    name: python:3.12-slim
    entrypoint: bash
    args:
      - -c
      - |
        cd ${_SERVICE_NAME}
        source venv/bin/activate || exit 1
        # 静的解析
        python -m ruff check || { echo "Static analysis failed"; exit 1; }

  # 静的解析
  - id: 'Check format'
    name: python:3.12-slim
    entrypoint: bash
    args:
      - -c
      - |
        cd ${_SERVICE_NAME}
        source venv/bin/activate || exit 1
        # フォーマットチェック
        python -m ruff format --check || { echo "Format check failed"; exit 1; }

# 環境変数に代入
substitutions:
  _SERVICE_NAME: hello-world
timeout: '3600s'
options:
  logging: CLOUD_LOGGING_ONLY
